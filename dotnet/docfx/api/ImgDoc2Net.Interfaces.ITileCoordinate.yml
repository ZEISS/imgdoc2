### YamlMime:ManagedReference
items:
- uid: ImgDoc2Net.Interfaces.ITileCoordinate
  commentId: T:ImgDoc2Net.Interfaces.ITileCoordinate
  id: ITileCoordinate
  parent: ImgDoc2Net.Interfaces
  children:
  - ImgDoc2Net.Interfaces.ITileCoordinate.EnumCoordinates
  - ImgDoc2Net.Interfaces.ITileCoordinate.TryGetCoordinate(ImgDoc2Net.Implementation.Dimension,System.Int32@)
  langs:
  - csharp
  - vb
  name: ITileCoordinate
  nameWithType: ITileCoordinate
  fullName: ImgDoc2Net.Interfaces.ITileCoordinate
  type: Interface
  source:
    remote:
      path: dotnet/imgdoc2Net/Interfaces/ITileCoordinate.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: ITileCoordinate
    path: ../imgdoc2Net/Interfaces/ITileCoordinate.cs
    startLine: 13
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Interfaces
  summary: "\nThis interface is used to represent the &quot;tile-coordinate&quot; of a tile. \n"
  example: []
  syntax:
    content: 'public interface ITileCoordinate : IEquatable<ITileCoordinate>'
    content.vb: Public Interface ITileCoordinate Inherits IEquatable(Of ITileCoordinate)
  inheritedMembers:
  - System.IEquatable{ImgDoc2Net.Interfaces.ITileCoordinate}.Equals(ImgDoc2Net.Interfaces.ITileCoordinate)
- uid: ImgDoc2Net.Interfaces.ITileCoordinate.TryGetCoordinate(ImgDoc2Net.Implementation.Dimension,System.Int32@)
  commentId: M:ImgDoc2Net.Interfaces.ITileCoordinate.TryGetCoordinate(ImgDoc2Net.Implementation.Dimension,System.Int32@)
  id: TryGetCoordinate(ImgDoc2Net.Implementation.Dimension,System.Int32@)
  parent: ImgDoc2Net.Interfaces.ITileCoordinate
  langs:
  - csharp
  - vb
  name: TryGetCoordinate(Dimension, out int)
  nameWithType: ITileCoordinate.TryGetCoordinate(Dimension, out int)
  fullName: ImgDoc2Net.Interfaces.ITileCoordinate.TryGetCoordinate(ImgDoc2Net.Implementation.Dimension, out int)
  type: Method
  source:
    remote:
      path: dotnet/imgdoc2Net/Interfaces/ITileCoordinate.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: TryGetCoordinate
    path: ../imgdoc2Net/Interfaces/ITileCoordinate.cs
    startLine: 21
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Interfaces
  summary: "\nTries the get coordinate of the specified dimension.\n"
  example: []
  syntax:
    content: bool TryGetCoordinate(Dimension imageDimension, out int coordinate)
    parameters:
    - id: imageDimension
      type: ImgDoc2Net.Implementation.Dimension
      description: The image dimension.
    - id: coordinate
      type: System.Int32
      description: If successful, The coordinate for the specified dimension.
    return:
      type: System.Boolean
      description: True if successful, false otherwise.
    content.vb: Function TryGetCoordinate(imageDimension As Dimension, coordinate As Integer) As Boolean
  overload: ImgDoc2Net.Interfaces.ITileCoordinate.TryGetCoordinate*
  nameWithType.vb: ITileCoordinate.TryGetCoordinate(Dimension, Integer)
  fullName.vb: ImgDoc2Net.Interfaces.ITileCoordinate.TryGetCoordinate(ImgDoc2Net.Implementation.Dimension, Integer)
  name.vb: TryGetCoordinate(Dimension, Integer)
- uid: ImgDoc2Net.Interfaces.ITileCoordinate.EnumCoordinates
  commentId: M:ImgDoc2Net.Interfaces.ITileCoordinate.EnumCoordinates
  id: EnumCoordinates
  parent: ImgDoc2Net.Interfaces.ITileCoordinate
  langs:
  - csharp
  - vb
  name: EnumCoordinates()
  nameWithType: ITileCoordinate.EnumCoordinates()
  fullName: ImgDoc2Net.Interfaces.ITileCoordinate.EnumCoordinates()
  type: Method
  source:
    remote:
      path: dotnet/imgdoc2Net/Interfaces/ITileCoordinate.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: EnumCoordinates
    path: ../imgdoc2Net/Interfaces/ITileCoordinate.cs
    startLine: 27
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Interfaces
  summary: "\nEnumerates the dimensions and the coordinates.\n"
  example: []
  syntax:
    content: IEnumerable<Tuple<Dimension, int>> EnumCoordinates()
    return:
      type: System.Collections.Generic.IEnumerable{System.Tuple{ImgDoc2Net.Implementation.Dimension,System.Int32}}
      description: Enumeration of the dimensions and the coordinates.
    content.vb: Function EnumCoordinates() As IEnumerable(Of Tuple(Of Dimension, Integer))
  overload: ImgDoc2Net.Interfaces.ITileCoordinate.EnumCoordinates*
references:
- uid: ImgDoc2Net.Interfaces
  commentId: N:ImgDoc2Net.Interfaces
  name: ImgDoc2Net.Interfaces
  nameWithType: ImgDoc2Net.Interfaces
  fullName: ImgDoc2Net.Interfaces
  spec.csharp:
  - uid: ImgDoc2Net
    name: ImgDoc2Net
  - name: .
  - uid: ImgDoc2Net.Interfaces
    name: Interfaces
  spec.vb:
  - uid: ImgDoc2Net
    name: ImgDoc2Net
  - name: .
  - uid: ImgDoc2Net.Interfaces
    name: Interfaces
- uid: System.IEquatable{ImgDoc2Net.Interfaces.ITileCoordinate}.Equals(ImgDoc2Net.Interfaces.ITileCoordinate)
  commentId: M:System.IEquatable{ImgDoc2Net.Interfaces.ITileCoordinate}.Equals(ImgDoc2Net.Interfaces.ITileCoordinate)
  parent: System.IEquatable{ImgDoc2Net.Interfaces.ITileCoordinate}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(ITileCoordinate)
  nameWithType: IEquatable<ITileCoordinate>.Equals(ITileCoordinate)
  fullName: System.IEquatable<ImgDoc2Net.Interfaces.ITileCoordinate>.Equals(ImgDoc2Net.Interfaces.ITileCoordinate)
  nameWithType.vb: IEquatable(Of ITileCoordinate).Equals(ITileCoordinate)
  fullName.vb: System.IEquatable(Of ImgDoc2Net.Interfaces.ITileCoordinate).Equals(ImgDoc2Net.Interfaces.ITileCoordinate)
  spec.csharp:
  - uid: System.IEquatable{ImgDoc2Net.Interfaces.ITileCoordinate}.Equals(ImgDoc2Net.Interfaces.ITileCoordinate)
    name: Equals
    isExternal: true
  - name: (
  - uid: ImgDoc2Net.Interfaces.ITileCoordinate
    name: ITileCoordinate
  - name: )
  spec.vb:
  - uid: System.IEquatable{ImgDoc2Net.Interfaces.ITileCoordinate}.Equals(ImgDoc2Net.Interfaces.ITileCoordinate)
    name: Equals
    isExternal: true
  - name: (
  - uid: ImgDoc2Net.Interfaces.ITileCoordinate
    name: ITileCoordinate
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
  - name: (
  - name: T
  - name: )
- uid: System.IEquatable{ImgDoc2Net.Interfaces.ITileCoordinate}
  commentId: T:System.IEquatable{ImgDoc2Net.Interfaces.ITileCoordinate}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<ITileCoordinate>
  nameWithType: IEquatable<ITileCoordinate>
  fullName: System.IEquatable<ImgDoc2Net.Interfaces.ITileCoordinate>
  nameWithType.vb: IEquatable(Of ITileCoordinate)
  fullName.vb: System.IEquatable(Of ImgDoc2Net.Interfaces.ITileCoordinate)
  name.vb: IEquatable(Of ITileCoordinate)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: <
  - uid: ImgDoc2Net.Interfaces.ITileCoordinate
    name: ITileCoordinate
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: ImgDoc2Net.Interfaces.ITileCoordinate
    name: ITileCoordinate
  - name: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: ImgDoc2Net.Interfaces.ITileCoordinate.TryGetCoordinate*
  commentId: Overload:ImgDoc2Net.Interfaces.ITileCoordinate.TryGetCoordinate
  name: TryGetCoordinate
  nameWithType: ITileCoordinate.TryGetCoordinate
  fullName: ImgDoc2Net.Interfaces.ITileCoordinate.TryGetCoordinate
- uid: ImgDoc2Net.Implementation.Dimension
  commentId: T:ImgDoc2Net.Implementation.Dimension
  parent: ImgDoc2Net.Implementation
  name: Dimension
  nameWithType: Dimension
  fullName: ImgDoc2Net.Implementation.Dimension
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: ImgDoc2Net.Implementation
  commentId: N:ImgDoc2Net.Implementation
  name: ImgDoc2Net.Implementation
  nameWithType: ImgDoc2Net.Implementation
  fullName: ImgDoc2Net.Implementation
  spec.csharp:
  - uid: ImgDoc2Net
    name: ImgDoc2Net
  - name: .
  - uid: ImgDoc2Net.Implementation
    name: Implementation
  spec.vb:
  - uid: ImgDoc2Net
    name: ImgDoc2Net
  - name: .
  - uid: ImgDoc2Net.Implementation
    name: Implementation
- uid: ImgDoc2Net.Interfaces.ITileCoordinate.EnumCoordinates*
  commentId: Overload:ImgDoc2Net.Interfaces.ITileCoordinate.EnumCoordinates
  name: EnumCoordinates
  nameWithType: ITileCoordinate.EnumCoordinates
  fullName: ImgDoc2Net.Interfaces.ITileCoordinate.EnumCoordinates
- uid: System.Collections.Generic.IEnumerable{System.Tuple{ImgDoc2Net.Implementation.Dimension,System.Int32}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Tuple{ImgDoc2Net.Implementation.Dimension,System.Int32}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Tuple<Dimension, int>>
  nameWithType: IEnumerable<Tuple<Dimension, int>>
  fullName: System.Collections.Generic.IEnumerable<System.Tuple<ImgDoc2Net.Implementation.Dimension, int>>
  nameWithType.vb: IEnumerable(Of Tuple(Of Dimension, Integer))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Tuple(Of ImgDoc2Net.Implementation.Dimension, Integer))
  name.vb: IEnumerable(Of Tuple(Of Dimension, Integer))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - uid: ImgDoc2Net.Implementation.Dimension
    name: Dimension
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: ImgDoc2Net.Implementation.Dimension
    name: Dimension
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
