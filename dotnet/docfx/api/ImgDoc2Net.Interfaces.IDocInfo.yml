### YamlMime:ManagedReference
items:
- uid: ImgDoc2Net.Interfaces.IDocInfo
  commentId: T:ImgDoc2Net.Interfaces.IDocInfo
  id: IDocInfo
  parent: ImgDoc2Net.Interfaces
  children:
  - ImgDoc2Net.Interfaces.IDocInfo.GetMinMaxForTileDimension(System.Collections.Generic.IEnumerable{ImgDoc2Net.Implementation.Dimension})
  - ImgDoc2Net.Interfaces.IDocInfo.GetTileDimensions
  langs:
  - csharp
  - vb
  name: IDocInfo
  nameWithType: IDocInfo
  fullName: ImgDoc2Net.Interfaces.IDocInfo
  type: Interface
  source:
    remote:
      path: dotnet/imgdoc2Net/Interfaces/IDocInfo.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: IDocInfo
    path: ../imgdoc2Net/Interfaces/IDocInfo.cs
    startLine: 12
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Interfaces
  summary: "\nThis interface is used for retrieving information about the document.\n"
  example: []
  syntax:
    content: public interface IDocInfo
    content.vb: Public Interface IDocInfo
- uid: ImgDoc2Net.Interfaces.IDocInfo.GetTileDimensions
  commentId: M:ImgDoc2Net.Interfaces.IDocInfo.GetTileDimensions
  id: GetTileDimensions
  parent: ImgDoc2Net.Interfaces.IDocInfo
  langs:
  - csharp
  - vb
  name: GetTileDimensions()
  nameWithType: IDocInfo.GetTileDimensions()
  fullName: ImgDoc2Net.Interfaces.IDocInfo.GetTileDimensions()
  type: Method
  source:
    remote:
      path: dotnet/imgdoc2Net/Interfaces/IDocInfo.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: GetTileDimensions
    path: ../imgdoc2Net/Interfaces/IDocInfo.cs
    startLine: 18
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Interfaces
  summary: "\nGet the tile-dimensions of the document. This is corresponding to the native method &apos;IDocInfo::GetTileDimensions&apos;.\n"
  example: []
  syntax:
    content: Dimension[] GetTileDimensions()
    return:
      type: ImgDoc2Net.Implementation.Dimension[]
      description: 'An array with the dimensions used in the document. '
    content.vb: Function GetTileDimensions() As Dimension()
  overload: ImgDoc2Net.Interfaces.IDocInfo.GetTileDimensions*
- uid: ImgDoc2Net.Interfaces.IDocInfo.GetMinMaxForTileDimension(System.Collections.Generic.IEnumerable{ImgDoc2Net.Implementation.Dimension})
  commentId: M:ImgDoc2Net.Interfaces.IDocInfo.GetMinMaxForTileDimension(System.Collections.Generic.IEnumerable{ImgDoc2Net.Implementation.Dimension})
  id: GetMinMaxForTileDimension(System.Collections.Generic.IEnumerable{ImgDoc2Net.Implementation.Dimension})
  parent: ImgDoc2Net.Interfaces.IDocInfo
  langs:
  - csharp
  - vb
  name: GetMinMaxForTileDimension(IEnumerable<Dimension>)
  nameWithType: IDocInfo.GetMinMaxForTileDimension(IEnumerable<Dimension>)
  fullName: ImgDoc2Net.Interfaces.IDocInfo.GetMinMaxForTileDimension(System.Collections.Generic.IEnumerable<ImgDoc2Net.Implementation.Dimension>)
  type: Method
  source:
    remote:
      path: dotnet/imgdoc2Net/Interfaces/IDocInfo.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: GetMinMaxForTileDimension
    path: ../imgdoc2Net/Interfaces/IDocInfo.cs
    startLine: 20
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Interfaces
  syntax:
    content: Dictionary<Dimension, (int Minimum, int Maximum)> GetMinMaxForTileDimension(IEnumerable<Dimension> dimensions)
    parameters:
    - id: dimensions
      type: System.Collections.Generic.IEnumerable{ImgDoc2Net.Implementation.Dimension}
    return:
      type: System.Collections.Generic.Dictionary{ImgDoc2Net.Implementation.Dimension,System.ValueTuple{System.Int32,System.Int32}}
    content.vb: Function GetMinMaxForTileDimension(dimensions As IEnumerable(Of Dimension)) As Dictionary(Of Dimension, (Minimum As Integer, Maximum As Integer))
  overload: ImgDoc2Net.Interfaces.IDocInfo.GetMinMaxForTileDimension*
  nameWithType.vb: IDocInfo.GetMinMaxForTileDimension(IEnumerable(Of Dimension))
  fullName.vb: ImgDoc2Net.Interfaces.IDocInfo.GetMinMaxForTileDimension(System.Collections.Generic.IEnumerable(Of ImgDoc2Net.Implementation.Dimension))
  name.vb: GetMinMaxForTileDimension(IEnumerable(Of Dimension))
references:
- uid: ImgDoc2Net.Interfaces
  commentId: N:ImgDoc2Net.Interfaces
  name: ImgDoc2Net.Interfaces
  nameWithType: ImgDoc2Net.Interfaces
  fullName: ImgDoc2Net.Interfaces
  spec.csharp:
  - uid: ImgDoc2Net
    name: ImgDoc2Net
  - name: .
  - uid: ImgDoc2Net.Interfaces
    name: Interfaces
  spec.vb:
  - uid: ImgDoc2Net
    name: ImgDoc2Net
  - name: .
  - uid: ImgDoc2Net.Interfaces
    name: Interfaces
- uid: ImgDoc2Net.Interfaces.IDocInfo.GetTileDimensions*
  commentId: Overload:ImgDoc2Net.Interfaces.IDocInfo.GetTileDimensions
  name: GetTileDimensions
  nameWithType: IDocInfo.GetTileDimensions
  fullName: ImgDoc2Net.Interfaces.IDocInfo.GetTileDimensions
- uid: ImgDoc2Net.Implementation.Dimension[]
  isExternal: true
  name: Dimension[]
  nameWithType: Dimension[]
  fullName: ImgDoc2Net.Implementation.Dimension[]
  nameWithType.vb: Dimension()
  fullName.vb: ImgDoc2Net.Implementation.Dimension()
  name.vb: Dimension()
  spec.csharp:
  - uid: ImgDoc2Net.Implementation.Dimension
    name: Dimension
  - name: '['
  - name: ']'
  spec.vb:
  - uid: ImgDoc2Net.Implementation.Dimension
    name: Dimension
  - name: (
  - name: )
- uid: ImgDoc2Net.Interfaces.IDocInfo.GetMinMaxForTileDimension*
  commentId: Overload:ImgDoc2Net.Interfaces.IDocInfo.GetMinMaxForTileDimension
  name: GetMinMaxForTileDimension
  nameWithType: IDocInfo.GetMinMaxForTileDimension
  fullName: ImgDoc2Net.Interfaces.IDocInfo.GetMinMaxForTileDimension
- uid: System.Collections.Generic.IEnumerable{ImgDoc2Net.Implementation.Dimension}
  commentId: T:System.Collections.Generic.IEnumerable{ImgDoc2Net.Implementation.Dimension}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Dimension>
  nameWithType: IEnumerable<Dimension>
  fullName: System.Collections.Generic.IEnumerable<ImgDoc2Net.Implementation.Dimension>
  nameWithType.vb: IEnumerable(Of Dimension)
  fullName.vb: System.Collections.Generic.IEnumerable(Of ImgDoc2Net.Implementation.Dimension)
  name.vb: IEnumerable(Of Dimension)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: ImgDoc2Net.Implementation.Dimension
    name: Dimension
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: ImgDoc2Net.Implementation.Dimension
    name: Dimension
  - name: )
- uid: System.Collections.Generic.Dictionary{ImgDoc2Net.Implementation.Dimension,System.ValueTuple{System.Int32,System.Int32}}
  commentId: T:System.Collections.Generic.Dictionary{ImgDoc2Net.Implementation.Dimension,System.ValueTuple{System.Int32,System.Int32}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Dimension, (int Minimum, int Maximum)>
  nameWithType: Dictionary<Dimension, (int Minimum, int Maximum)>
  fullName: System.Collections.Generic.Dictionary<ImgDoc2Net.Implementation.Dimension, (int Minimum, int Maximum)>
  nameWithType.vb: Dictionary(Of Dimension, (Minimum As Integer, Maximum As Integer))
  fullName.vb: System.Collections.Generic.Dictionary(Of ImgDoc2Net.Implementation.Dimension, (Minimum As Integer, Maximum As Integer))
  name.vb: Dictionary(Of Dimension, (Minimum As Integer, Maximum As Integer))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - uid: ImgDoc2Net.Implementation.Dimension
    name: Dimension
  - name: ','
  - name: " "
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.Minimum
    name: Minimum
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.Maximum
    name: Maximum
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: ImgDoc2Net.Implementation.Dimension
    name: Dimension
  - name: ','
  - name: " "
  - name: (
  - uid: System.ValueTuple{System.Int32,System.Int32}.Minimum
    name: Minimum
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.Maximum
    name: Maximum
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
