### YamlMime:ManagedReference
items:
- uid: ImgDoc2Net.Implementation.Utilities
  commentId: T:ImgDoc2Net.Implementation.Utilities
  id: Utilities
  parent: ImgDoc2Net.Implementation
  children:
  - ImgDoc2Net.Implementation.Utilities.CreateFromStringRepresentation(System.String)
  - ImgDoc2Net.Implementation.Utilities.DataTypeToInformalString(ImgDoc2Net.Interfaces.DataType)
  - ImgDoc2Net.Implementation.Utilities.EnumerateCoordinatesInBounds(System.Collections.Generic.IReadOnlyList{System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}})
  - ImgDoc2Net.Implementation.Utilities.GetBytesPerPel(ImgDoc2Net.Interfaces.PixelType)
  - ImgDoc2Net.Implementation.Utilities.IsValidDimension(System.Char)
  - ImgDoc2Net.Implementation.Utilities.LogicalPositionToStringRepresentation(ImgDoc2Net.Interfaces.LogicalPosition@)
  - ImgDoc2Net.Implementation.Utilities.ParseStringRepresentationOfDimensionAndRange(System.String)
  - ImgDoc2Net.Implementation.Utilities.PixelTypeToInformalString(ImgDoc2Net.Interfaces.PixelType)
  - ImgDoc2Net.Implementation.Utilities.Tile2dBaseInfoToStringRepresentation(ImgDoc2Net.Interfaces.Tile2dBaseInfo@)
  - ImgDoc2Net.Implementation.Utilities.TileBlobInfoToStringRepresentation(ImgDoc2Net.Interfaces.TileBlobInfo@)
  - ImgDoc2Net.Implementation.Utilities.TileCoordinateToStringRepresentation(ImgDoc2Net.Interfaces.ITileCoordinate)
  langs:
  - csharp
  - vb
  name: Utilities
  nameWithType: Utilities
  fullName: ImgDoc2Net.Implementation.Utilities
  type: Class
  source:
    remote:
      path: dotnet/imgdoc2Net/Implementation/Utilities.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: Utilities
    path: ../imgdoc2Net/Implementation/Utilities.cs
    startLine: 298
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Implementation
  summary: "\nA bunch of utility functions are gathered here.\n"
  example: []
  syntax:
    content: public static class Utilities
    content.vb: Public Module Utilities
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: ImgDoc2Net.Implementation.Utilities.GetBytesPerPel(ImgDoc2Net.Interfaces.PixelType)
  commentId: M:ImgDoc2Net.Implementation.Utilities.GetBytesPerPel(ImgDoc2Net.Interfaces.PixelType)
  id: GetBytesPerPel(ImgDoc2Net.Interfaces.PixelType)
  parent: ImgDoc2Net.Implementation.Utilities
  langs:
  - csharp
  - vb
  name: GetBytesPerPel(PixelType)
  nameWithType: Utilities.GetBytesPerPel(PixelType)
  fullName: ImgDoc2Net.Implementation.Utilities.GetBytesPerPel(ImgDoc2Net.Interfaces.PixelType)
  type: Method
  source:
    remote:
      path: dotnet/imgdoc2Net/Implementation/Utilities.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: GetBytesPerPel
    path: ../imgdoc2Net/Implementation/Utilities.cs
    startLine: 19
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Implementation
  syntax:
    content: public static int GetBytesPerPel(PixelType pixelType)
    parameters:
    - id: pixelType
      type: ImgDoc2Net.Interfaces.PixelType
    return:
      type: System.Int32
    content.vb: Public Shared Function GetBytesPerPel(pixelType As PixelType) As Integer
  overload: ImgDoc2Net.Implementation.Utilities.GetBytesPerPel*
- uid: ImgDoc2Net.Implementation.Utilities.ParseStringRepresentationOfDimensionAndRange(System.String)
  commentId: M:ImgDoc2Net.Implementation.Utilities.ParseStringRepresentationOfDimensionAndRange(System.String)
  id: ParseStringRepresentationOfDimensionAndRange(System.String)
  parent: ImgDoc2Net.Implementation.Utilities
  langs:
  - csharp
  - vb
  name: ParseStringRepresentationOfDimensionAndRange(string)
  nameWithType: Utilities.ParseStringRepresentationOfDimensionAndRange(string)
  fullName: ImgDoc2Net.Implementation.Utilities.ParseStringRepresentationOfDimensionAndRange(string)
  type: Method
  source:
    remote:
      path: dotnet/imgdoc2Net/Implementation/Utilities.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: ParseStringRepresentationOfDimensionAndRange
    path: ../imgdoc2Net/Implementation/Utilities.cs
    startLine: 44
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Implementation
  summary: "\nParse a string in the format &quot;T1-10Z2&quot; (i.e. dimension identifier, followed by either an interval\nor a single number) into a list containing the dimension, start and end.\n"
  example: []
  syntax:
    content: public static List<(Dimension Dimension, int Start, int End)> ParseStringRepresentationOfDimensionAndRange(string s)
    parameters:
    - id: s
      type: System.String
      description: The string to be parsed.
    return:
      type: System.Collections.Generic.List{System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}}
      description: A list containing the dimension, start and end.
    content.vb: Public Shared Function ParseStringRepresentationOfDimensionAndRange(s As String) As List(Of (Dimension As Dimension, Start As Integer, [End] As Integer))
  overload: ImgDoc2Net.Implementation.Utilities.ParseStringRepresentationOfDimensionAndRange*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThrown when the string is determined to have an invalid format."
  nameWithType.vb: Utilities.ParseStringRepresentationOfDimensionAndRange(String)
  fullName.vb: ImgDoc2Net.Implementation.Utilities.ParseStringRepresentationOfDimensionAndRange(String)
  name.vb: ParseStringRepresentationOfDimensionAndRange(String)
- uid: ImgDoc2Net.Implementation.Utilities.EnumerateCoordinatesInBounds(System.Collections.Generic.IReadOnlyList{System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}})
  commentId: M:ImgDoc2Net.Implementation.Utilities.EnumerateCoordinatesInBounds(System.Collections.Generic.IReadOnlyList{System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}})
  id: EnumerateCoordinatesInBounds(System.Collections.Generic.IReadOnlyList{System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}})
  parent: ImgDoc2Net.Implementation.Utilities
  langs:
  - csharp
  - vb
  name: EnumerateCoordinatesInBounds(IReadOnlyList<(Dimension Dimension, int Start, int End)>)
  nameWithType: Utilities.EnumerateCoordinatesInBounds(IReadOnlyList<(Dimension Dimension, int Start, int End)>)
  fullName: ImgDoc2Net.Implementation.Utilities.EnumerateCoordinatesInBounds(System.Collections.Generic.IReadOnlyList<(ImgDoc2Net.Implementation.Dimension Dimension, int Start, int End)>)
  type: Method
  source:
    remote:
      path: dotnet/imgdoc2Net/Implementation/Utilities.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: EnumerateCoordinatesInBounds
    path: ../imgdoc2Net/Implementation/Utilities.cs
    startLine: 92
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Implementation
  summary: "\nEnumerates tile-coordinates as defined by the ranges in the range collection. The enumeration starts \nwith the first item in the range, then the second is incremented etc.\nThe specified range collection is checked whether there is a duplicate dimension included. If this is the\ncase, an InvalidArgument-exception is thrown. Also, if the start index is behind the end index, an\nInvalidArgument-exception is thrown.\n"
  example: []
  syntax:
    content: public static IEnumerable<TileCoordinate> EnumerateCoordinatesInBounds(IReadOnlyList<(Dimension Dimension, int Start, int End)> range)
    parameters:
    - id: range
      type: System.Collections.Generic.IReadOnlyList{System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}}
      description: The range collection.
    return:
      type: System.Collections.Generic.IEnumerable{ImgDoc2Net.Implementation.TileCoordinate}
      description: "\nAn enumerator that allows foreach to be used to process the coordinates in bounds in\nthis collection.\n"
    content.vb: Public Shared Function EnumerateCoordinatesInBounds(range As IReadOnlyList(Of (Dimension As Dimension, Start As Integer, [End] As Integer))) As IEnumerable(Of TileCoordinate)
  overload: ImgDoc2Net.Implementation.Utilities.EnumerateCoordinatesInBounds*
  nameWithType.vb: Utilities.EnumerateCoordinatesInBounds(IReadOnlyList(Of (Dimension As Dimension, Start As Integer, End As Integer)))
  fullName.vb: ImgDoc2Net.Implementation.Utilities.EnumerateCoordinatesInBounds(System.Collections.Generic.IReadOnlyList(Of (Dimension As ImgDoc2Net.Implementation.Dimension, Start As Integer, End As Integer)))
  name.vb: EnumerateCoordinatesInBounds(IReadOnlyList(Of (Dimension As Dimension, Start As Integer, End As Integer)))
- uid: ImgDoc2Net.Implementation.Utilities.CreateFromStringRepresentation(System.String)
  commentId: M:ImgDoc2Net.Implementation.Utilities.CreateFromStringRepresentation(System.String)
  id: CreateFromStringRepresentation(System.String)
  parent: ImgDoc2Net.Implementation.Utilities
  langs:
  - csharp
  - vb
  name: CreateFromStringRepresentation(string)
  nameWithType: Utilities.CreateFromStringRepresentation(string)
  fullName: ImgDoc2Net.Implementation.Utilities.CreateFromStringRepresentation(string)
  type: Method
  source:
    remote:
      path: dotnet/imgdoc2Net/Implementation/Utilities.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: CreateFromStringRepresentation
    path: ../imgdoc2Net/Implementation/Utilities.cs
    startLine: 166
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Implementation
  summary: "\nCreates a dimension-query-clause from a string representation. The syntax is:\n&quot;A3,5B-3,1m9,10&quot; - that is: a character identifying the dimension, followed by two\ncomma separated integers.\n"
  example: []
  syntax:
    content: public static DimensionQueryClause CreateFromStringRepresentation(string s)
    parameters:
    - id: s
      type: System.String
      description: 'The string to be parsed. '
    return:
      type: ImgDoc2Net.Implementation.DimensionQueryClause
      description: 'The dimension-query-clause created from the string representation. '
    content.vb: Public Shared Function CreateFromStringRepresentation(s As String) As DimensionQueryClause
  overload: ImgDoc2Net.Implementation.Utilities.CreateFromStringRepresentation*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThrown when one or more arguments have unsupported or illegal values. \n"
  nameWithType.vb: Utilities.CreateFromStringRepresentation(String)
  fullName.vb: ImgDoc2Net.Implementation.Utilities.CreateFromStringRepresentation(String)
  name.vb: CreateFromStringRepresentation(String)
- uid: ImgDoc2Net.Implementation.Utilities.TileCoordinateToStringRepresentation(ImgDoc2Net.Interfaces.ITileCoordinate)
  commentId: M:ImgDoc2Net.Implementation.Utilities.TileCoordinateToStringRepresentation(ImgDoc2Net.Interfaces.ITileCoordinate)
  id: TileCoordinateToStringRepresentation(ImgDoc2Net.Interfaces.ITileCoordinate)
  parent: ImgDoc2Net.Implementation.Utilities
  langs:
  - csharp
  - vb
  name: TileCoordinateToStringRepresentation(ITileCoordinate)
  nameWithType: Utilities.TileCoordinateToStringRepresentation(ITileCoordinate)
  fullName: ImgDoc2Net.Implementation.Utilities.TileCoordinateToStringRepresentation(ImgDoc2Net.Interfaces.ITileCoordinate)
  type: Method
  source:
    remote:
      path: dotnet/imgdoc2Net/Implementation/Utilities.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: TileCoordinateToStringRepresentation
    path: ../imgdoc2Net/Implementation/Utilities.cs
    startLine: 208
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Implementation
  syntax:
    content: public static string TileCoordinateToStringRepresentation(ITileCoordinate tileCoordinate)
    parameters:
    - id: tileCoordinate
      type: ImgDoc2Net.Interfaces.ITileCoordinate
    return:
      type: System.String
    content.vb: Public Shared Function TileCoordinateToStringRepresentation(tileCoordinate As ITileCoordinate) As String
  overload: ImgDoc2Net.Implementation.Utilities.TileCoordinateToStringRepresentation*
- uid: ImgDoc2Net.Implementation.Utilities.LogicalPositionToStringRepresentation(ImgDoc2Net.Interfaces.LogicalPosition@)
  commentId: M:ImgDoc2Net.Implementation.Utilities.LogicalPositionToStringRepresentation(ImgDoc2Net.Interfaces.LogicalPosition@)
  id: LogicalPositionToStringRepresentation(ImgDoc2Net.Interfaces.LogicalPosition@)
  parent: ImgDoc2Net.Implementation.Utilities
  langs:
  - csharp
  - vb
  name: LogicalPositionToStringRepresentation(in LogicalPosition)
  nameWithType: Utilities.LogicalPositionToStringRepresentation(in LogicalPosition)
  fullName: ImgDoc2Net.Implementation.Utilities.LogicalPositionToStringRepresentation(in ImgDoc2Net.Interfaces.LogicalPosition)
  type: Method
  source:
    remote:
      path: dotnet/imgdoc2Net/Implementation/Utilities.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: LogicalPositionToStringRepresentation
    path: ../imgdoc2Net/Implementation/Utilities.cs
    startLine: 219
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Implementation
  syntax:
    content: public static string LogicalPositionToStringRepresentation(in LogicalPosition logicalPosition)
    parameters:
    - id: logicalPosition
      type: ImgDoc2Net.Interfaces.LogicalPosition
    return:
      type: System.String
    content.vb: Public Shared Function LogicalPositionToStringRepresentation(logicalPosition As LogicalPosition) As String
  overload: ImgDoc2Net.Implementation.Utilities.LogicalPositionToStringRepresentation*
  nameWithType.vb: Utilities.LogicalPositionToStringRepresentation(LogicalPosition)
  fullName.vb: ImgDoc2Net.Implementation.Utilities.LogicalPositionToStringRepresentation(ImgDoc2Net.Interfaces.LogicalPosition)
  name.vb: LogicalPositionToStringRepresentation(LogicalPosition)
- uid: ImgDoc2Net.Implementation.Utilities.PixelTypeToInformalString(ImgDoc2Net.Interfaces.PixelType)
  commentId: M:ImgDoc2Net.Implementation.Utilities.PixelTypeToInformalString(ImgDoc2Net.Interfaces.PixelType)
  id: PixelTypeToInformalString(ImgDoc2Net.Interfaces.PixelType)
  parent: ImgDoc2Net.Implementation.Utilities
  langs:
  - csharp
  - vb
  name: PixelTypeToInformalString(PixelType)
  nameWithType: Utilities.PixelTypeToInformalString(PixelType)
  fullName: ImgDoc2Net.Implementation.Utilities.PixelTypeToInformalString(ImgDoc2Net.Interfaces.PixelType)
  type: Method
  source:
    remote:
      path: dotnet/imgdoc2Net/Implementation/Utilities.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: PixelTypeToInformalString
    path: ../imgdoc2Net/Implementation/Utilities.cs
    startLine: 231
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Implementation
  summary: Convert the specified pixel type to an informal string.
  example: []
  syntax:
    content: public static string PixelTypeToInformalString(PixelType pixelType)
    parameters:
    - id: pixelType
      type: ImgDoc2Net.Interfaces.PixelType
      description: The pixel type.
    return:
      type: System.String
      description: The informal string describing the pixel type.
    content.vb: Public Shared Function PixelTypeToInformalString(pixelType As PixelType) As String
  overload: ImgDoc2Net.Implementation.Utilities.PixelTypeToInformalString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThrown if the pixel type is invalid or unknown.\n"
- uid: ImgDoc2Net.Implementation.Utilities.DataTypeToInformalString(ImgDoc2Net.Interfaces.DataType)
  commentId: M:ImgDoc2Net.Implementation.Utilities.DataTypeToInformalString(ImgDoc2Net.Interfaces.DataType)
  id: DataTypeToInformalString(ImgDoc2Net.Interfaces.DataType)
  parent: ImgDoc2Net.Implementation.Utilities
  langs:
  - csharp
  - vb
  name: DataTypeToInformalString(DataType)
  nameWithType: Utilities.DataTypeToInformalString(DataType)
  fullName: ImgDoc2Net.Implementation.Utilities.DataTypeToInformalString(ImgDoc2Net.Interfaces.DataType)
  type: Method
  source:
    remote:
      path: dotnet/imgdoc2Net/Implementation/Utilities.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: DataTypeToInformalString
    path: ../imgdoc2Net/Implementation/Utilities.cs
    startLine: 257
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Implementation
  summary: "\nGet an informal string representation for the specified data-type enum.\n"
  example: []
  syntax:
    content: public static string DataTypeToInformalString(DataType dataType)
    parameters:
    - id: dataType
      type: ImgDoc2Net.Interfaces.DataType
      description: The data-type enum to get a string representation for.
    return:
      type: System.String
      description: The informal string.
    content.vb: Public Shared Function DataTypeToInformalString(dataType As DataType) As String
  overload: ImgDoc2Net.Implementation.Utilities.DataTypeToInformalString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      Thrown when one or more arguments have unsupported or
         illegal values.
- uid: ImgDoc2Net.Implementation.Utilities.Tile2dBaseInfoToStringRepresentation(ImgDoc2Net.Interfaces.Tile2dBaseInfo@)
  commentId: M:ImgDoc2Net.Implementation.Utilities.Tile2dBaseInfoToStringRepresentation(ImgDoc2Net.Interfaces.Tile2dBaseInfo@)
  id: Tile2dBaseInfoToStringRepresentation(ImgDoc2Net.Interfaces.Tile2dBaseInfo@)
  parent: ImgDoc2Net.Implementation.Utilities
  langs:
  - csharp
  - vb
  name: Tile2dBaseInfoToStringRepresentation(in Tile2dBaseInfo)
  nameWithType: Utilities.Tile2dBaseInfoToStringRepresentation(in Tile2dBaseInfo)
  fullName: ImgDoc2Net.Implementation.Utilities.Tile2dBaseInfoToStringRepresentation(in ImgDoc2Net.Interfaces.Tile2dBaseInfo)
  type: Method
  source:
    remote:
      path: dotnet/imgdoc2Net/Implementation/Utilities.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: Tile2dBaseInfoToStringRepresentation
    path: ../imgdoc2Net/Implementation/Utilities.cs
    startLine: 274
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Implementation
  syntax:
    content: public static string Tile2dBaseInfoToStringRepresentation(in Tile2dBaseInfo tile2dBaseInfo)
    parameters:
    - id: tile2dBaseInfo
      type: ImgDoc2Net.Interfaces.Tile2dBaseInfo
    return:
      type: System.String
    content.vb: Public Shared Function Tile2dBaseInfoToStringRepresentation(tile2dBaseInfo As Tile2dBaseInfo) As String
  overload: ImgDoc2Net.Implementation.Utilities.Tile2dBaseInfoToStringRepresentation*
  nameWithType.vb: Utilities.Tile2dBaseInfoToStringRepresentation(Tile2dBaseInfo)
  fullName.vb: ImgDoc2Net.Implementation.Utilities.Tile2dBaseInfoToStringRepresentation(ImgDoc2Net.Interfaces.Tile2dBaseInfo)
  name.vb: Tile2dBaseInfoToStringRepresentation(Tile2dBaseInfo)
- uid: ImgDoc2Net.Implementation.Utilities.TileBlobInfoToStringRepresentation(ImgDoc2Net.Interfaces.TileBlobInfo@)
  commentId: M:ImgDoc2Net.Implementation.Utilities.TileBlobInfoToStringRepresentation(ImgDoc2Net.Interfaces.TileBlobInfo@)
  id: TileBlobInfoToStringRepresentation(ImgDoc2Net.Interfaces.TileBlobInfo@)
  parent: ImgDoc2Net.Implementation.Utilities
  langs:
  - csharp
  - vb
  name: TileBlobInfoToStringRepresentation(in TileBlobInfo)
  nameWithType: Utilities.TileBlobInfoToStringRepresentation(in TileBlobInfo)
  fullName: ImgDoc2Net.Implementation.Utilities.TileBlobInfoToStringRepresentation(in ImgDoc2Net.Interfaces.TileBlobInfo)
  type: Method
  source:
    remote:
      path: dotnet/imgdoc2Net/Implementation/Utilities.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: TileBlobInfoToStringRepresentation
    path: ../imgdoc2Net/Implementation/Utilities.cs
    startLine: 280
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Implementation
  syntax:
    content: public static string TileBlobInfoToStringRepresentation(in TileBlobInfo tileBlobInfo)
    parameters:
    - id: tileBlobInfo
      type: ImgDoc2Net.Interfaces.TileBlobInfo
    return:
      type: System.String
    content.vb: Public Shared Function TileBlobInfoToStringRepresentation(tileBlobInfo As TileBlobInfo) As String
  overload: ImgDoc2Net.Implementation.Utilities.TileBlobInfoToStringRepresentation*
  nameWithType.vb: Utilities.TileBlobInfoToStringRepresentation(TileBlobInfo)
  fullName.vb: ImgDoc2Net.Implementation.Utilities.TileBlobInfoToStringRepresentation(ImgDoc2Net.Interfaces.TileBlobInfo)
  name.vb: TileBlobInfoToStringRepresentation(TileBlobInfo)
- uid: ImgDoc2Net.Implementation.Utilities.IsValidDimension(System.Char)
  commentId: M:ImgDoc2Net.Implementation.Utilities.IsValidDimension(System.Char)
  id: IsValidDimension(System.Char)
  parent: ImgDoc2Net.Implementation.Utilities
  langs:
  - csharp
  - vb
  name: IsValidDimension(char)
  nameWithType: Utilities.IsValidDimension(char)
  fullName: ImgDoc2Net.Implementation.Utilities.IsValidDimension(char)
  type: Method
  source:
    remote:
      path: dotnet/imgdoc2Net/Implementation/Utilities.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: IsValidDimension
    path: ../imgdoc2Net/Implementation/Utilities.cs
    startLine: 289
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Implementation
  summary: Query if the specified character is valid &apos;dimension&apos;.
  example: []
  syntax:
    content: public static bool IsValidDimension(char c)
    parameters:
    - id: c
      type: System.Char
      description: The character to test.
    return:
      type: System.Boolean
      description: True if the char is valid dimension identifier; false otherwise.
    content.vb: Public Shared Function IsValidDimension(c As Char) As Boolean
  overload: ImgDoc2Net.Implementation.Utilities.IsValidDimension*
  nameWithType.vb: Utilities.IsValidDimension(Char)
  fullName.vb: ImgDoc2Net.Implementation.Utilities.IsValidDimension(Char)
  name.vb: IsValidDimension(Char)
references:
- uid: ImgDoc2Net.Implementation
  commentId: N:ImgDoc2Net.Implementation
  name: ImgDoc2Net.Implementation
  nameWithType: ImgDoc2Net.Implementation
  fullName: ImgDoc2Net.Implementation
  spec.csharp:
  - uid: ImgDoc2Net
    name: ImgDoc2Net
  - name: .
  - uid: ImgDoc2Net.Implementation
    name: Implementation
  spec.vb:
  - uid: ImgDoc2Net
    name: ImgDoc2Net
  - name: .
  - uid: ImgDoc2Net.Implementation
    name: Implementation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: ImgDoc2Net.Implementation.Utilities.GetBytesPerPel*
  commentId: Overload:ImgDoc2Net.Implementation.Utilities.GetBytesPerPel
  name: GetBytesPerPel
  nameWithType: Utilities.GetBytesPerPel
  fullName: ImgDoc2Net.Implementation.Utilities.GetBytesPerPel
- uid: ImgDoc2Net.Interfaces.PixelType
  commentId: T:ImgDoc2Net.Interfaces.PixelType
  parent: ImgDoc2Net.Interfaces
  name: PixelType
  nameWithType: PixelType
  fullName: ImgDoc2Net.Interfaces.PixelType
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: ImgDoc2Net.Interfaces
  commentId: N:ImgDoc2Net.Interfaces
  name: ImgDoc2Net.Interfaces
  nameWithType: ImgDoc2Net.Interfaces
  fullName: ImgDoc2Net.Interfaces
  spec.csharp:
  - uid: ImgDoc2Net
    name: ImgDoc2Net
  - name: .
  - uid: ImgDoc2Net.Interfaces
    name: Interfaces
  spec.vb:
  - uid: ImgDoc2Net
    name: ImgDoc2Net
  - name: .
  - uid: ImgDoc2Net.Interfaces
    name: Interfaces
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: ImgDoc2Net.Implementation.Utilities.ParseStringRepresentationOfDimensionAndRange*
  commentId: Overload:ImgDoc2Net.Implementation.Utilities.ParseStringRepresentationOfDimensionAndRange
  name: ParseStringRepresentationOfDimensionAndRange
  nameWithType: Utilities.ParseStringRepresentationOfDimensionAndRange
  fullName: ImgDoc2Net.Implementation.Utilities.ParseStringRepresentationOfDimensionAndRange
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Collections.Generic.List{System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}}
  commentId: T:System.Collections.Generic.List{System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<(Dimension Dimension, int Start, int End)>
  nameWithType: List<(Dimension Dimension, int Start, int End)>
  fullName: System.Collections.Generic.List<(ImgDoc2Net.Implementation.Dimension Dimension, int Start, int End)>
  nameWithType.vb: List(Of (Dimension As Dimension, Start As Integer, End As Integer))
  fullName.vb: System.Collections.Generic.List(Of (Dimension As ImgDoc2Net.Implementation.Dimension, Start As Integer, End As Integer))
  name.vb: List(Of (Dimension As Dimension, Start As Integer, End As Integer))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: (
  - uid: ImgDoc2Net.Implementation.Dimension
    name: Dimension
  - name: " "
  - uid: System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}.Dimension
    name: Dimension
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}.Start
    name: Start
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}.End
    name: End
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}.Dimension
    name: Dimension
  - name: " "
  - name: As
  - name: " "
  - uid: ImgDoc2Net.Implementation.Dimension
    name: Dimension
  - name: ','
  - name: " "
  - uid: System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}.Start
    name: Start
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}.End
    name: End
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: ImgDoc2Net.Implementation.Utilities.EnumerateCoordinatesInBounds*
  commentId: Overload:ImgDoc2Net.Implementation.Utilities.EnumerateCoordinatesInBounds
  name: EnumerateCoordinatesInBounds
  nameWithType: Utilities.EnumerateCoordinatesInBounds
  fullName: ImgDoc2Net.Implementation.Utilities.EnumerateCoordinatesInBounds
- uid: System.Collections.Generic.IReadOnlyList{System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<(Dimension Dimension, int Start, int End)>
  nameWithType: IReadOnlyList<(Dimension Dimension, int Start, int End)>
  fullName: System.Collections.Generic.IReadOnlyList<(ImgDoc2Net.Implementation.Dimension Dimension, int Start, int End)>
  nameWithType.vb: IReadOnlyList(Of (Dimension As Dimension, Start As Integer, End As Integer))
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of (Dimension As ImgDoc2Net.Implementation.Dimension, Start As Integer, End As Integer))
  name.vb: IReadOnlyList(Of (Dimension As Dimension, Start As Integer, End As Integer))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
  - name: <
  - name: (
  - uid: ImgDoc2Net.Implementation.Dimension
    name: Dimension
  - name: " "
  - uid: System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}.Dimension
    name: Dimension
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}.Start
    name: Start
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}.End
    name: End
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}.Dimension
    name: Dimension
  - name: " "
  - name: As
  - name: " "
  - uid: ImgDoc2Net.Implementation.Dimension
    name: Dimension
  - name: ','
  - name: " "
  - uid: System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}.Start
    name: Start
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{ImgDoc2Net.Implementation.Dimension,System.Int32,System.Int32}.End
    name: End
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{ImgDoc2Net.Implementation.TileCoordinate}
  commentId: T:System.Collections.Generic.IEnumerable{ImgDoc2Net.Implementation.TileCoordinate}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TileCoordinate>
  nameWithType: IEnumerable<TileCoordinate>
  fullName: System.Collections.Generic.IEnumerable<ImgDoc2Net.Implementation.TileCoordinate>
  nameWithType.vb: IEnumerable(Of TileCoordinate)
  fullName.vb: System.Collections.Generic.IEnumerable(Of ImgDoc2Net.Implementation.TileCoordinate)
  name.vb: IEnumerable(Of TileCoordinate)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: ImgDoc2Net.Implementation.TileCoordinate
    name: TileCoordinate
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: ImgDoc2Net.Implementation.TileCoordinate
    name: TileCoordinate
  - name: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: ImgDoc2Net.Implementation.Utilities.CreateFromStringRepresentation*
  commentId: Overload:ImgDoc2Net.Implementation.Utilities.CreateFromStringRepresentation
  name: CreateFromStringRepresentation
  nameWithType: Utilities.CreateFromStringRepresentation
  fullName: ImgDoc2Net.Implementation.Utilities.CreateFromStringRepresentation
- uid: ImgDoc2Net.Implementation.DimensionQueryClause
  commentId: T:ImgDoc2Net.Implementation.DimensionQueryClause
  parent: ImgDoc2Net.Implementation
  name: DimensionQueryClause
  nameWithType: DimensionQueryClause
  fullName: ImgDoc2Net.Implementation.DimensionQueryClause
- uid: ImgDoc2Net.Implementation.Utilities.TileCoordinateToStringRepresentation*
  commentId: Overload:ImgDoc2Net.Implementation.Utilities.TileCoordinateToStringRepresentation
  name: TileCoordinateToStringRepresentation
  nameWithType: Utilities.TileCoordinateToStringRepresentation
  fullName: ImgDoc2Net.Implementation.Utilities.TileCoordinateToStringRepresentation
- uid: ImgDoc2Net.Interfaces.ITileCoordinate
  commentId: T:ImgDoc2Net.Interfaces.ITileCoordinate
  parent: ImgDoc2Net.Interfaces
  name: ITileCoordinate
  nameWithType: ITileCoordinate
  fullName: ImgDoc2Net.Interfaces.ITileCoordinate
- uid: ImgDoc2Net.Implementation.Utilities.LogicalPositionToStringRepresentation*
  commentId: Overload:ImgDoc2Net.Implementation.Utilities.LogicalPositionToStringRepresentation
  name: LogicalPositionToStringRepresentation
  nameWithType: Utilities.LogicalPositionToStringRepresentation
  fullName: ImgDoc2Net.Implementation.Utilities.LogicalPositionToStringRepresentation
- uid: ImgDoc2Net.Interfaces.LogicalPosition
  commentId: T:ImgDoc2Net.Interfaces.LogicalPosition
  parent: ImgDoc2Net.Interfaces
  name: LogicalPosition
  nameWithType: LogicalPosition
  fullName: ImgDoc2Net.Interfaces.LogicalPosition
- uid: ImgDoc2Net.Implementation.Utilities.PixelTypeToInformalString*
  commentId: Overload:ImgDoc2Net.Implementation.Utilities.PixelTypeToInformalString
  name: PixelTypeToInformalString
  nameWithType: Utilities.PixelTypeToInformalString
  fullName: ImgDoc2Net.Implementation.Utilities.PixelTypeToInformalString
- uid: ImgDoc2Net.Implementation.Utilities.DataTypeToInformalString*
  commentId: Overload:ImgDoc2Net.Implementation.Utilities.DataTypeToInformalString
  name: DataTypeToInformalString
  nameWithType: Utilities.DataTypeToInformalString
  fullName: ImgDoc2Net.Implementation.Utilities.DataTypeToInformalString
- uid: ImgDoc2Net.Interfaces.DataType
  commentId: T:ImgDoc2Net.Interfaces.DataType
  parent: ImgDoc2Net.Interfaces
  name: DataType
  nameWithType: DataType
  fullName: ImgDoc2Net.Interfaces.DataType
- uid: ImgDoc2Net.Implementation.Utilities.Tile2dBaseInfoToStringRepresentation*
  commentId: Overload:ImgDoc2Net.Implementation.Utilities.Tile2dBaseInfoToStringRepresentation
  name: Tile2dBaseInfoToStringRepresentation
  nameWithType: Utilities.Tile2dBaseInfoToStringRepresentation
  fullName: ImgDoc2Net.Implementation.Utilities.Tile2dBaseInfoToStringRepresentation
- uid: ImgDoc2Net.Interfaces.Tile2dBaseInfo
  commentId: T:ImgDoc2Net.Interfaces.Tile2dBaseInfo
  parent: ImgDoc2Net.Interfaces
  name: Tile2dBaseInfo
  nameWithType: Tile2dBaseInfo
  fullName: ImgDoc2Net.Interfaces.Tile2dBaseInfo
- uid: ImgDoc2Net.Implementation.Utilities.TileBlobInfoToStringRepresentation*
  commentId: Overload:ImgDoc2Net.Implementation.Utilities.TileBlobInfoToStringRepresentation
  name: TileBlobInfoToStringRepresentation
  nameWithType: Utilities.TileBlobInfoToStringRepresentation
  fullName: ImgDoc2Net.Implementation.Utilities.TileBlobInfoToStringRepresentation
- uid: ImgDoc2Net.Interfaces.TileBlobInfo
  commentId: T:ImgDoc2Net.Interfaces.TileBlobInfo
  parent: ImgDoc2Net.Interfaces
  name: TileBlobInfo
  nameWithType: TileBlobInfo
  fullName: ImgDoc2Net.Interfaces.TileBlobInfo
- uid: ImgDoc2Net.Implementation.Utilities.IsValidDimension*
  commentId: Overload:ImgDoc2Net.Implementation.Utilities.IsValidDimension
  name: IsValidDimension
  nameWithType: Utilities.IsValidDimension
  fullName: ImgDoc2Net.Implementation.Utilities.IsValidDimension
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: char
  nameWithType: char
  fullName: char
  nameWithType.vb: Char
  fullName.vb: Char
  name.vb: Char
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
