### YamlMime:ManagedReference
items:
- uid: ImgDoc2Net.Interfaces.IDimensionQueryClause
  commentId: T:ImgDoc2Net.Interfaces.IDimensionQueryClause
  id: IDimensionQueryClause
  parent: ImgDoc2Net.Interfaces
  children:
  - ImgDoc2Net.Interfaces.IDimensionQueryClause.EnumConditions
  langs:
  - csharp
  - vb
  name: IDimensionQueryClause
  nameWithType: IDimensionQueryClause
  fullName: ImgDoc2Net.Interfaces.IDimensionQueryClause
  type: Interface
  source:
    remote:
      path: dotnet/imgdoc2Net/Interfaces/IDimensionQueryClause.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: IDimensionQueryClause
    path: ../imgdoc2Net/Interfaces/IDimensionQueryClause.cs
    startLine: 10
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Interfaces
  summary: 'This interface describes a query clause for the dimension-columns. '
  example: []
  syntax:
    content: public interface IDimensionQueryClause
    content.vb: Public Interface IDimensionQueryClause
- uid: ImgDoc2Net.Interfaces.IDimensionQueryClause.EnumConditions
  commentId: M:ImgDoc2Net.Interfaces.IDimensionQueryClause.EnumConditions
  id: EnumConditions
  parent: ImgDoc2Net.Interfaces.IDimensionQueryClause
  langs:
  - csharp
  - vb
  name: EnumConditions()
  nameWithType: IDimensionQueryClause.EnumConditions()
  fullName: ImgDoc2Net.Interfaces.IDimensionQueryClause.EnumConditions()
  type: Method
  source:
    remote:
      path: dotnet/imgdoc2Net/Interfaces/IDimensionQueryClause.cs
      branch: main
      repo: git@github.com:ptahmose/imgdoc2.git
    id: EnumConditions
    path: ../imgdoc2Net/Interfaces/IDimensionQueryClause.cs
    startLine: 15
  assemblies:
  - ImgDoc2Net
  namespace: ImgDoc2Net.Interfaces
  summary: Enumerates the dimension clauses.
  example: []
  syntax:
    content: IEnumerable<DimensionCondition> EnumConditions()
    return:
      type: System.Collections.Generic.IEnumerable{ImgDoc2Net.Interfaces.DimensionCondition}
      description: An enumerator that allows foreach to be used to process the dimension clauses collection.
    content.vb: Function EnumConditions() As IEnumerable(Of DimensionCondition)
  overload: ImgDoc2Net.Interfaces.IDimensionQueryClause.EnumConditions*
references:
- uid: ImgDoc2Net.Interfaces
  commentId: N:ImgDoc2Net.Interfaces
  name: ImgDoc2Net.Interfaces
  nameWithType: ImgDoc2Net.Interfaces
  fullName: ImgDoc2Net.Interfaces
  spec.csharp:
  - uid: ImgDoc2Net
    name: ImgDoc2Net
  - name: .
  - uid: ImgDoc2Net.Interfaces
    name: Interfaces
  spec.vb:
  - uid: ImgDoc2Net
    name: ImgDoc2Net
  - name: .
  - uid: ImgDoc2Net.Interfaces
    name: Interfaces
- uid: ImgDoc2Net.Interfaces.IDimensionQueryClause.EnumConditions*
  commentId: Overload:ImgDoc2Net.Interfaces.IDimensionQueryClause.EnumConditions
  name: EnumConditions
  nameWithType: IDimensionQueryClause.EnumConditions
  fullName: ImgDoc2Net.Interfaces.IDimensionQueryClause.EnumConditions
- uid: System.Collections.Generic.IEnumerable{ImgDoc2Net.Interfaces.DimensionCondition}
  commentId: T:System.Collections.Generic.IEnumerable{ImgDoc2Net.Interfaces.DimensionCondition}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<DimensionCondition>
  nameWithType: IEnumerable<DimensionCondition>
  fullName: System.Collections.Generic.IEnumerable<ImgDoc2Net.Interfaces.DimensionCondition>
  nameWithType.vb: IEnumerable(Of DimensionCondition)
  fullName.vb: System.Collections.Generic.IEnumerable(Of ImgDoc2Net.Interfaces.DimensionCondition)
  name.vb: IEnumerable(Of DimensionCondition)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: ImgDoc2Net.Interfaces.DimensionCondition
    name: DimensionCondition
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: ImgDoc2Net.Interfaces.DimensionCondition
    name: DimensionCondition
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
