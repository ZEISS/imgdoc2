name: CMake

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-linux-x64:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        shell: bash
        run: |
           sudo apt install libeigen3-dev

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        #run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_VERBOSE_MAKEFILE=on
        run: |
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DLIBCZI_BUILD_PREFER_EXTERNALPACKAGE_EIGEN3=ON -DLIBCZI_BUILD_DYNLIB=OFF -DLIBCZI_BUILD_UNITTESTS=OFF

      - name: Build C++
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel

      - name: Configure CMake for 'Clang-Tidy' build
        run: cmake -B ${{github.workspace}}/clangtidybuild -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DIMGDOC2_BUILD_CLANGTIDY=ON -DIMGDOC2_BUILD_CONVCZI=OFF -DIMGDOC2_BUILD_NATIVEIMGDOC2CMD=OFF

      - name: Build 'Clang-Tidy'
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/clangtidybuild --config ${{env.BUILD_TYPE}} --parallel

      - name: Run native Tests
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

      - name: Build .NET code
        working-directory: ${{github.workspace}}/dotnet
        run: |
          imgdoc2_version_number="$(cat ../VersionNumber.txt)"
          # TODO(JBL): if adding "--configuration ${{env.BUILD_TYPE}}" (=Release) to the dotnet build command, the build fails. Investigate why.

          # note: the version number we read from "VersionNumber.txt" is of the form "Major.Minor.Build" (following semantic versioning).
          # We append ".0" to it to make it a valid version number .NET assembly (which traditionally follows a format "Major.Minor.Build.Revision").
          dotnet build  -p:Version="$imgdoc2_version_number".0

      - name: Run .NET tests
        working-directory: ${{github.workspace}}/dotnet
        run: dotnet test --collect:"XPlat Code Coverage" --results-directory ${{github.workspace}}/coverage_imgdoc2net

      - name: prepare imgdoc2API-binaries
        run: |
          mkdir ${{github.workspace}}/imgdoc2API-binaries
          cd ${{github.workspace}}/imgdoc2API-binaries
          cp ${{github.workspace}}/dotnet/native_dlls/libimgdoc2API.so .

      - name: Upload Linux-x64 Binaries
        uses: actions/upload-artifact@v4
        with:
          name: imgdoc2API-linux-x64-binaries
          path: ${{github.workspace}}/imgdoc2API-binaries

      - name: code-coverage
        run: |
          sudo apt-get -y install gcovr
          cmake -B ${{github.workspace}}/coverage_libimgdoc2 -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG -DIMGDOC2_CODECOV_GCOVRXML=ON -DIMGDOC2_BUILD_CONVCZI=OFF
          cd ${{github.workspace}}/coverage_libimgdoc2
          make code_coverage_gcovr_xml

      - name: Upload coverage reports for libimgdoc2 to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: false
          directory: ${{github.workspace}}/coverage_libimgdoc2
          files: code_coverage_gcovr_xml.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

      - name: Upload coverage reports for imgdoc2Net to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: false
          directory: ${{github.workspace}}/coverage_imgdoc2net
          files: coverage.cobertura.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  build-windows-x64:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: 'C:/vcpkg/installed'
          key: vcpkg-x64-windows-
          restore-keys: |
            vcpkg-x64-windows-

      - name: Install dependencies
        shell: bash
        run: |
           vcpkg install --triplet x64-windows-static eigen3

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows-static -DLIBCZI_BUILD_PREFER_EXTERNALPACKAGE_EIGEN3=ON -DLIBCZI_BUILD_DYNLIB=OFF -DLIBCZI_BUILD_UNITTESTS=OFF

      - name: Build C++
        run: cmake --build ${{github.workspace}}/build --config "${{env.BUILD_TYPE}}"

      - name: Run native Tests
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{env.BUILD_TYPE}}

      - name: Build .NET code
        shell: bash
        working-directory: ${{github.workspace}}/dotnet
        run: |
          imgdoc2_version_number="$(cat ../VersionNumber.txt)"
          # note: the version number we read from "VersionNumber.txt" is of the form "Major.Minor.Build" (following semantic versioning).
          # We append ".0" to it to make it a valid version number .NET assembly (which traditionally follows a format "Major.Minor.Build.Revision").
          dotnet build --configuration "${{env.BUILD_TYPE}}" -p:Version="$imgdoc2_version_number".0

      - name: Run .NET tests
        working-directory: ${{github.workspace}}/dotnet
        run: dotnet test

      - name: prepare imgdoc2API-binaries
        run: |
          mkdir ${{github.workspace}}/imgdoc2API-binaries
          cd ${{github.workspace}}/imgdoc2API-binaries
          # we put the win-x64 native DLL and the .NET DLL into the same folder for packaging
          cp ${{github.workspace}}/dotnet/native_dlls/imgdoc2API.dll .
          cp ${{github.workspace}}/dotnet/imgdoc2Net/bin/Release/netstandard2.0/ImgDoc2Net.dll .
          #cp ${{github.workspace}}/dotnet/imgdoc2Net/imgdoc2.nuspec .

      - name: Upload Windows-x64 Binaries
        uses: actions/upload-artifact@v4
        with:
          name: imgdoc2API-windows-x64-binaries
          path: ${{github.workspace}}/imgdoc2API-binaries

  build-windows-arm64:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: 'C:/vcpkg/installed'
          key: vcpkg-arm64-windows-
          restore-keys: |
            vcpkg-arm64-windows-

      - name: Install dependencies
        shell: bash
        run: |
           vcpkg install --triplet arm64-windows-static eigen3

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -A ARM64 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=arm64-windows-static -DLIBCZI_BUILD_PREFER_EXTERNALPACKAGE_EIGEN3=ON -DLIBCZI_BUILD_DYNLIB=OFF -DLIBCZI_BUILD_UNITTESTS=OFF -DIMGDOC2_RUNDISCOVER_UNITTESTS=OFF

      - name: Build C++
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: prepare imgdoc2API-binaries
        run: |
          mkdir ${{github.workspace}}/imgdoc2API-binaries
          cd ${{github.workspace}}/imgdoc2API-binaries
          cp ${{github.workspace}}/build/imgdoc2API/Release/imgdoc2API.dll .

      - name: Upload Windows-arm64 Binaries
        uses: actions/upload-artifact@v4
        with:
          name: imgdoc2API-windows-arm64-binaries
          path: ${{github.workspace}}/imgdoc2API-binaries


  package:
    needs: [build-windows-x64, build-linux-x64, build-windows-arm64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download All Binaries
        uses: actions/download-artifact@v4
        with:
          path: binaries/

      - name: Package NuGet
        run: |
          # We organize the native binaries in a way that they can be packed into a NuGet package. We follow this convention for the folder structure:
          # runtimes/<RID>/native, where <RID> is the Runtime Identifier for the target platform.
          mkdir nuget-packaging
          mkdir -p nuget-packaging/runtimes/linux-x64/native
          mkdir -p nuget-packaging/runtimes/win-x64/native
          mkdir -p nuget-packaging/runtimes/win-arm64/native
          cp binaries/imgdoc2API-linux-x64-binaries/libimgdoc2API.so nuget-packaging/runtimes/linux-x64/native/
          cp binaries/imgdoc2API-windows-x64-binaries/imgdoc2API.dll nuget-packaging/runtimes/win-x64/native/
          cp binaries/imgdoc2API-windows-arm64-binaries/imgdoc2API.dll nuget-packaging/runtimes/win-arm64/native/
          cp binaries/imgdoc2API-windows-x64-binaries/ImgDoc2Net.dll nuget-packaging/
          cp "${{github.workspace}}/dotnet/imgdoc2Net/imgdoc2.nuspec" nuget-packaging/

          # Use sed to replace $version$ with the content of imgdoc2_nuget_version_number variable
          imgdoc2_nuget_version_number="$(cat ${{github.workspace}}/VersionNumber.txt)"
          imgdoc2_nuget_version_number+="-alpha"
          imgdoc2_nuget_version_number+="+"
          imgdoc2_nuget_version_number+="$(git rev-parse HEAD)"
          echo "imgdoc2_nuget_version_number: $imgdoc2_nuget_version_number"
          # shellcheck disable=SC2016
          sed -i 's/\$version\$/'"$imgdoc2_nuget_version_number/g" nuget-packaging/imgdoc2.nuspec

          # Copy the icon file and update the nuspec file
          mkdir -p nuget-packaging/images
          cp "${{github.workspace}}/libimgdoc2/doc/images/logo_55x55.png" nuget-packaging/images/icon.png
          # shellcheck disable=SC2016
          sed -i 's|\$icon\$|'"images/icon.png"'|g' nuget-packaging/imgdoc2.nuspec

          # copy the readme file to the docs folder
          mkdir -p nuget-packaging/docs
          cp ${{github.workspace}}/dotnet/imgdoc2Net/readme.md nuget-packaging/docs/

          # set the ID of the Nuget package - if the secret NUGET_PACKAGE_ID is not set, we use the default value "test-imgdoc2.net"
          if [ -z "${{ secrets.NUGET_PACKAGE_ID }}" ]; then
            echo "NUGET_PACKAGE_ID is not set. Using default value 'test-imgdoc2.net'."
            # shellcheck disable=SC2236,SC2016
            sed -i 's/\$id\$/'"test-imgdoc2.net/g" nuget-packaging/imgdoc2.nuspec
          else
            echo "NUGET_PACKAGE_ID is set. Using value '${{ secrets.NUGET_PACKAGE_ID }}'."
            # shellcheck disable=SC2236,SC2016
            sed -i 's/\$id\$/'"${{ secrets.NUGET_PACKAGE_ID }}/g" nuget-packaging/imgdoc2.nuspec
          fi

          cd nuget-packaging
          nuget pack imgdoc2.nuspec
          echo "NuGet package created."
        shell: bash

      - name: determine whether to deploy NuGet package to nuget.org
        id: check_whether_to_deploy_nuget
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }} # see https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions, this is required to prevent script injections
          BRANCH_NAME: ${{ github.ref }}
        run: |
          # we only push the NuGet package if
          # * the NUGETAPI_KEY secret is set
          # * AND the commit-message contains the string "[deploy-nuget]" (case-insensitive)
          # * AND we are on the main branch
          echo "COMMIT_MESSAGE: $COMMIT_MESSAGE"
          should_deploy=false
          if [ -n "${{ secrets.NUGETAPI_KEY }}" ]; then
            if [[ "$BRANCH_NAME" == "refs/heads/main" ]]; then
              COMMIT_MESSAGE_LOWER="$(echo "$COMMIT_MESSAGE" | awk '{print tolower($0)}')"
              # shellcheck disable=SC2086,SC2086
              if [[ "$COMMIT_MESSAGE_LOWER" == *"[deploy-nuget]"* ]]; then
                should_deploy=true
              fi
            fi
          fi
          # shellcheck disable=SC2086,SC2086
          if [ "$should_deploy" == "true" ]; then
              echo "should_deploy=true" >> $GITHUB_OUTPUT
              echo "Deploy NuGet package to nuget.org."
          else
              echo "should_deploy=false" >> $GITHUB_OUTPUT
              echo "DO NOT deploy NuGet package to nuget.org."
          fi
        shell: bash

      - name: Upload Nuget as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Nuget
          path: |
            ${{github.workspace}}/nuget-packaging/*.nupkg

      # if we determined that we should deploy the NuGet package (in the check_whether_to_deploy_nuget step), we push it to nuget.org
      - name: Deploy to NuGet
        if: steps.check_whether_to_deploy_nuget.outputs.should_deploy == 'true'
        run: |
          nuget push "${{github.workspace}}/nuget-packaging/*.nupkg" -Source https://api.nuget.org/v3/index.json -ApiKey ${{secrets.NUGETAPI_KEY}}

  build:
    needs: [package]
    runs-on: ubuntu-latest
    steps:
      - name: Final Task
        run: echo "All build jobs completed successfully"
