name: CMake

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        #run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_VERBOSE_MAKEFILE=on
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build C++
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Configure CMake for 'Clang-Tidy' build
        run: cmake -B ${{github.workspace}}/clangtidybuild -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DIMGDOC2_BUILD_CLANGTIDY=ON -DIMGDOC2_BUILD_CONVCZI=OFF

      - name: Build 'Clang-Tidy'
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/clangtidybuild --config ${{env.BUILD_TYPE}}

      - name: Run native Tests
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

      - name: Build .NET code
        working-directory: ${{github.workspace}}/dotnet
        run: dotnet build /p:EnableWindowsTargeting=true

      - name: Run .NET tests
        working-directory: ${{github.workspace}}/dotnet
        run: dotnet test /p:EnableWindowsTargeting=true

      - name: code-coverage
        run: |
          sudo apt-get -y install gcovr
          cmake -B ${{github.workspace}}/coveragebuild -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG -DIMGDOC2_CODECOV_GCOVRXML=ON -DIMGDOC2_BUILD_CONVCZI=OFF
          cd ${{github.workspace}}/coveragebuild
          make code_coverage_gcovr_xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          directory: ${{github.workspace}}/coveragebuild
          files: code_coverage_gcovr_xml.xml
          verbose: true
